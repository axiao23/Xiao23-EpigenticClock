luad <- fread("../data/luad_methylation_betas.csv",
data.table = F)
luad <- fread("luad_methylation_betas.csv",
data.table = F)
library("data.table")
luad <- fread("../data/luad_methylation_betas.csv",
data.table = F)
luad <- fread("luad_methylation_betas.csv",
data.table = F)
getwd()=='/Users/xiaoz'
luad <- fread("luad_methylation_betas.csv",
data.table = F)
luad <- fread("luad_methylation_betas.csv",
data.table = F)
luad <- fread("luad_methylation_betas.csv",
+               data.table = F)
luad = fread("../data/luad_methylation_betas.csv",
data.table = F)
luad = fread("../data/luad_methylation_betas.csv",
data.table = F)
luad <- fread("../data/luad_methylation_betas.csv",
data.table = F)
luad <- fread("../data/luad_methylation_betas.csv",
data.table = F)
library(data.table)
luad = fread("../data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("Desktop/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("xiaoz
/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("xiaoz/data/luad_methylation_betas.csv",
data.table = F)
luad <- fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
View(luad)
View(luad)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
library(tidyverse)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("Desktop/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv",
data.table = F)
luad = fread("luad/data/luad_methylation_betas.csv", data.table = F)
read.csv(“luad_betas_methylclock_imputed.csv”, row.names=1)
df = as.data.frame(luad_betas_methylclock_imputed,row.names=1)
library(readr)
luad_betas_methylclock_imputed <- read_csv("Documents/GitHub/Epigenetic-Clocks/data/luad_betas_methylclock_imputed.csv")
View(luad_betas_methylclock_imputed)
df = read_csv("luad_betas_methylclock_imputed.csv")
library(readr)
luad_betas_methylclock_imputed <- read_csv("Documents/GitHub/Epigenetic-Clocks/data/luad_betas_methylclock_imputed.csv")
View(luad_betas_methylclock_imputed)
transposed_df = t(df)
df <- luad_betas_methylclock_imputed
transposed_df = t(df)
colnames(transposed_df) = transposed_df[1,]
View(transposed_df)
clean_df = data.frame(transposed_df[-1,])
clean_df$UUID = row.names(clean_df)
View(clean_df)
names(clean_df)
dim(clean_df)
clean_df = data.frame(transposed_df[-1,])
clean_df$UUID = row.names(clean_df)
head(clean_df$UUID)
one <- merge(luad_demographic_data, clean_df,by = "UUID")
library(readr)
luad_demographic_data <- read_csv("Documents/GitHub/Epigenetic-Clocks/data/luad_demographic_data.csv")
View(luad_demographic_data)
View(one)
one <- merge(luad_demographic_data, clean_df,by = "UUID")
View(one)
head(luad_demographic_data$UUID)
head(clean_df$UUID)
sum(clean_df$UUID %in% luad_demographic_data$UUID)
setwd("~/Documents/GitHub/Xiao23-EpigenticClock/data")
library(tidyverse)
library(broom)
tcga_dat = read.csv("../data/TCGA_LUAD_EXPRESSION_METHYLATION_data.csv")
# entire dataset nested loop
cg_indices = grep("cg",names(tcga_dat))
length(cg_indices)
gene_indices = setdiff(2:ncol(tcga_dat),cg_indices)
length(gene_indices)
#output = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
#output2 = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
lmgenes <- data.frame(matrix(NA,    # Create empty data frame
nrow = 2,
ncol = 243))
counter = 0
for(i in 1:length(gene_indices[1:50]))
{
for(j in 1:length(cg_indices))
{
counter = counter + 1
#print(paste(c("Gene:", names(tcga_dat)[gene_indices[i]], "cg:",names(tcga_dat)[cg_indices[j]])))
#model1 = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#print(model1)
lmgenes[,counter] = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#colnames(lmgenes) <- genes[1:3]
#print(lmgenes)
#beta = coef(lmgenes)
#model1 = data.frame(beta)
# demo storing correlations
#output[i,j] = coef(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
#output2[i,j] = cor(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
# run the linear model with lm
# store the coefficient for methylation in one matrix
# store the p-value for methylation in another matrix
}
}
View(lmgenes)
#output = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
#output2 = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
lmgenes <- data.frame(matrix(NA,    # Create empty data frame
nrow = 2,
ncol = 243))
counter = 0
for(i in 1:length(gene_indices[1:50]))
{
for(j in 1:length(cg_indices))
{
counter = counter + 1
#print(paste(c("Gene:", names(tcga_dat)[gene_indices[i]], "cg:",names(tcga_dat)[cg_indices[j]])))
#model1 = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#print(model1)
lmgenes[,counter] = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#colnames(lmgenes) <- genes[1:3]
#print(lmgenes)
#beta = coef(lmgenes)
#model1 = data.frame(beta)
# demo storing correlations
#output[i,j] = coef(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
#output2[i,j] = cor(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
# run the linear model with lm
# store the coefficient for methylation in one matrix
# store the p-value for methylation in another matrix
}
}
#output = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
#output2 = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
lmgenes1 <- data.frame(matrix(NA,    # Create empty data frame
nrow = 2,
ncol = 243))
counter = 0
View(lmgenes1)
for(i in 1:length(gene_indices[51:100]))
{
for(j in 1:length(cg_indices))
{
counter = counter + 1
#print(paste(c("Gene:", names(tcga_dat)[gene_indices[i]], "cg:",names(tcga_dat)[cg_indices[j]])))
#model1 = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#print(model1)
lmgenes1[,counter] = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#colnames(lmgenes) <- genes[1:3]
#print(lmgenes)
#beta = coef(lmgenes)
#model1 = data.frame(beta)
# demo storing correlations
#output[i,j] = coef(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
#output2[i,j] = cor(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
# run the linear model with lm
# store the coefficient for methylation in one matrix
# store the p-value for methylation in another matrix
}
}
write.csv(lmgenes, "../bipartite/merged_data.csv", row.names = F)
write.csv(lmgenes, "../bipartite/1_50genes.csv", row.names = F)
write.csv(lmgenes1, "../bipartite/51_100genes.csv", row.names = F)
# entire dataset nested loop
cg_indices = grep("cg",names(tcga_dat))
length(cg_indices)
gene_indices = setdiff(2:ncol(tcga_dat),cg_indices)
length(gene_indices)
#output = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
#output2 = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
lmgenes2 <- data.frame(matrix(NA,    # Create empty data frame
nrow = 2,
ncol = 243))
counter = 0
for(i in 1:length(gene_indices[101:150]))
{
for(j in 1:length(cg_indices))
{
counter = counter + 1
#print(paste(c("Gene:", names(tcga_dat)[gene_indices[i]], "cg:",names(tcga_dat)[cg_indices[j]])))
#model1 = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#print(model1)
lmgenes2[,counter] = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#colnames(lmgenes) <- genes[1:3]
#print(lmgenes)
#beta = coef(lmgenes)
#model1 = data.frame(beta)
# demo storing correlations
#output[i,j] = coef(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
#output2[i,j] = cor(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
# run the linear model with lm
# store the coefficient for methylation in one matrix
# store the p-value for methylation in another matrix
}
}
View(lmgenes2)
write.csv(lmgenes2, "../bipartite/101_150genes.csv", row.names = F)
#output = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
#output2 = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
lmgenes3 <- data.frame(matrix(NA,    # Create empty data frame
nrow = 2,
ncol = 243))
View(lmgenes3)
counter = 0
for(i in 1:length(gene_indices[151:200]))
{
for(j in 1:length(cg_indices))
{
counter = counter + 1
#print(paste(c("Gene:", names(tcga_dat)[gene_indices[i]], "cg:",names(tcga_dat)[cg_indices[j]])))
#model1 = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#print(model1)
lmgenes3[,counter] = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#colnames(lmgenes) <- genes[1:3]
#print(lmgenes)
#beta = coef(lmgenes)
#model1 = data.frame(beta)
# demo storing correlations
#output[i,j] = coef(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
#output2[i,j] = cor(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
# run the linear model with lm
# store the coefficient for methylation in one matrix
# store the p-value for methylation in another matrix
}
}
write.csv(lmgenes3, "../bipartite/150_200genes.csv", row.names = F)
#output = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
#output2 = matrix(nrow=length(gene_indices), ncol=length(cg_indices))
lmgenes4 <- data.frame(matrix(NA,    # Create empty data frame
nrow = 2,
ncol = 243))
View(lmgenes4)
counter = 0
for(i in 1:length(gene_indices[201:243]))
{
for(j in 1:length(cg_indices))
{
counter = counter + 1
#print(paste(c("Gene:", names(tcga_dat)[gene_indices[i]], "cg:",names(tcga_dat)[cg_indices[j]])))
#model1 = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#print(model1)
lmgenes4[,counter] = coef(lm(tcga_dat[,gene_indices[i]] ~ tcga_dat[,cg_indices[j]], data = tcga_dat))
#colnames(lmgenes) <- genes[1:3]
#print(lmgenes)
#beta = coef(lmgenes)
#model1 = data.frame(beta)
# demo storing correlations
#output[i,j] = coef(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
#output2[i,j] = cor(tcga_dat[,gene_indices[i]], tcga_dat[,cg_indices[j]])
# run the linear model with lm
# store the coefficient for methylation in one matrix
# store the p-value for methylation in another matrix
}
}
write.csv(lmgenes4, "../bipartite/201_243genes.csv", row.names = F)
